
AWS Glue Studio Notebook
You are now running a AWS Glue Studio notebook; To start using your notebook you need to start an AWS Glue Interactive Session.
Optional: Run this cell to see available notebook commands ("magics").
%help
Run this cell to set up and start your interactive session.
%idle_timeout 2880
%glue_version 4.0
%worker_type G.1X
%number_of_workers 5

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import col, explode_outer, concat, lit
from pyspark.sql.types import StructType, ArrayType

  
sc = SparkContext.getOrCreate()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
Welcome to the Glue Interactive Sessions Kernel
For more information on available magic commands, please type %help in any new cell.

Please view our Getting Started page to access the most up-to-date information on the Interactive Sessions kernel: https://docs.aws.amazon.com/glue/latest/dg/interactive-sessions.html
Installed kernel version: 1.0.5 
Current idle_timeout is None minutes.
idle_timeout has been set to 2880 minutes.
Setting Glue version to: 4.0
Previous worker type: None
Setting new worker type to: G.1X
Previous number of workers: None
Setting new number of workers to: 5
Trying to create a Glue session for the kernel.
Session Type: glueetl
Worker Type: G.1X
Number of Workers: 5
Idle Timeout: 2880
Session ID: dd335e2a-98d5-421b-af7c-12752a88a6d2
Applying the following default arguments:
--glue_kernel_version 1.0.5
--enable-glue-datacatalog true
Waiting for session dd335e2a-98d5-421b-af7c-12752a88a6d2 to get into ready status...
Session dd335e2a-98d5-421b-af7c-12752a88a6d2 has been created.

#### Input and output file paths
customers_path = "s3://aws-glue-vsb-us-east-2/shopping-details/input/users.json"
orders_path =  "s3://aws-glue-vsb-us-east-2/shopping-details/input/orders.json"
products_path =  "s3://aws-glue-vsb-us-east-2/shopping-details/input/products.json"

output_path =  "s3://aws-glue-vsb-us-east-2/shopping-details/merged_data/"
### Function to flatten json file
def flatten_df(df):
    complex_fields = dict([(field.name, field.dataType)
                           for field in df.schema.fields
                           if isinstance(field.dataType, ArrayType) or isinstance(field.dataType, StructType)])
    while len(complex_fields) != 0:
        col_name = list(complex_fields.keys())[0]
        if isinstance(complex_fields[col_name], StructType):
            expanded = [col(col_name + '.' + k).alias(col_name + '_' + k) for k in [n.name for n in complex_fields[col_name]]]
            df = df.select("*", *expanded).drop(col_name)
        elif isinstance(complex_fields[col_name], ArrayType):
            df = df.withColumn(col_name, explode_outer(col_name))
        complex_fields = dict([(field.name, field.dataType)
                               for field in df.schema.fields
                               if isinstance(field.dataType, ArrayType) or isinstance(field.dataType, StructType)])
    return df
Creating DynamicFrames for the files in the input folder
source_dyf = glueContext.create_dynamic_frame.from_catalog(database='shopping_db', table_name='order_details_schema')
source_dyf.printSchema()

df_customers = glueContext.create_dynamic_frame.from_catalog(database='shopping_db', table_name='customers_users_json').toDF()
df_orders = glueContext.create_dynamic_frame.from_catalog(database='shopping_db', table_name='orders_json').toDF()
df_products = glueContext.create_dynamic_frame.from_catalog(database='shopping_db', table_name='products_json').toDF()
root
|-- user_id: long
|-- full_name: string
|-- email: string
|-- order_id: long
|-- order_date: string
|-- item_id: string
|-- item_product_name: string
|-- quantity: long
|-- price: double
|-- total_amount: double
|-- product_product_name: string
|-- category: string
|-- stock_quantity: long
Flatten the dataframes and rename/transform the columns as per the requirement
df_flatten_customers = flatten_df(df_customers)
df_flatten_orders = flatten_df(df_orders)
df_flatten_products = flatten_df(df_products)

df_flatten_customers = df_flatten_customers\
                                .withColumn("full_name", concat(df_flatten_customers["users_name_first_name"], lit(" "), df_flatten_customers["users_name_last_name"])) \
                                .withColumnRenamed("users_user_id", "user_id") \
                                .withColumnRenamed("users_contact_email", "email")

df_flatten_orders = df_flatten_orders\
                                .withColumnRenamed("orders_order_id", "order_id") \
                                .withColumnRenamed("orders_order_date", "order_date") \
                                .withColumnRenamed("orders_items_item_id", "item_id") \
                                .withColumnRenamed("orders_items_product_name", "item_product_name") \
                                .withColumnRenamed("orders_items_quantity", "quantity") \
                                .withColumnRenamed("orders_items_price", "price") \
                                .withColumnRenamed("orders_total_amount", "total_amount")

df_flatten_products = df_flatten_products\
                                .withColumnRenamed("products_category", "category") \
                                .withColumnRenamed("products_stock_quantity", "stock_quantity")

df_flatten_customers.printSchema()
df_flatten_orders.printSchema()
df_flatten_products.printSchema()
root
 |-- user_id: string (nullable = true)
 |-- users_name_first_name: string (nullable = true)
 |-- users_name_last_name: string (nullable = true)
 |-- email: string (nullable = true)
 |-- users_contact_phone: string (nullable = true)
 |-- users_address_home_street: string (nullable = true)
 |-- users_address_home_city: string (nullable = true)
 |-- users_address_home_zipcode: string (nullable = true)
 |-- users_address_office_street: string (nullable = true)
 |-- users_address_office_city: string (nullable = true)
 |-- users_address_office_zipcode: string (nullable = true)
 |-- full_name: string (nullable = true)

root
 |-- order_id: string (nullable = true)
 |-- orders_customer_id: string (nullable = true)
 |-- order_date: string (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- item_id: string (nullable = true)
 |-- item_product_name: string (nullable = true)
 |-- quantity: integer (nullable = true)
 |-- price: double (nullable = true)

root
 |-- products_product_id: string (nullable = true)
 |-- products_product_name: string (nullable = true)
 |-- category: string (nullable = true)
 |-- products_price: double (nullable = true)
 |-- stock_quantity: integer (nullable = true)
Merge the dataframes and select the required columns
merge_df = df_flatten_customers.join(df_flatten_orders, df_flatten_customers.user_id == df_flatten_orders.orders_customer_id, "inner") \
                               .join(df_flatten_products, df_flatten_orders.item_product_name == df_flatten_products.products_product_name, "inner") \
                               .select(df_flatten_customers['user_id'], df_flatten_customers['full_name'], df_flatten_customers['email'],
                                       df_flatten_orders['order_id'], df_flatten_orders['order_date'], df_flatten_orders['item_id'],
                                      df_flatten_orders['item_product_name'], df_flatten_orders['quantity'], df_flatten_orders['price'],df_flatten_orders['total_amount'], 
                                      df_flatten_products['products_product_name'], df_flatten_products['category'], df_flatten_products['stock_quantity']) \
                                .withColumnRenamed('products_product_name', 'product_product_name') \
                                .orderBy(df_flatten_customers['user_id'])

merge_df.show(30)
root
 |-- user_id: string (nullable = true)
 |-- full_name: string (nullable = true)
 |-- email: string (nullable = true)
 |-- order_id: string (nullable = true)
 |-- order_date: string (nullable = true)
 |-- item_id: string (nullable = true)
 |-- item_product_name: string (nullable = true)
 |-- quantity: integer (nullable = true)
 |-- price: double (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- product_product_name: string (nullable = true)
 |-- category: string (nullable = true)
 |-- stock_quantity: integer (nullable = true)

+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+
|user_id|        full_name|               email|order_id|order_date|item_id|  item_product_name|quantity| price|total_amount|product_product_name|   category|stock_quantity|
+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+
|   1001|         John Doe|  john.doe@email.com|    5001|2024-01-15|   B456|              Mouse|       2|  25.0|      1250.0|               Mouse|Electronics|           200|
|   1001|         John Doe|  john.doe@email.com|    5001|2024-01-15|   A123|             Laptop|       1|1200.0|      1250.0|              Laptop|Electronics|            50|
|   1002|       Jane Smith|jane.smith@email.com|    5002|2024-01-16|   C789|           Keyboard|       1|  75.0|        75.0|            Keyboard|Electronics|           150|
|   1003|    Alice Johnson|alice.johnson@ema...|    5003|2024-01-17|   D012|            Monitor|       2| 200.0|       400.0|             Monitor|Electronics|            70|
|   1004|     Bob Williams|bob.williams@emai...|    5004|2024-01-18|   E345|            Printer|       1| 150.0|       150.0|             Printer|Electronics|            30|
|   1005|      Emily Brown|emily.brown@email...|    5005|2024-01-19|   F678|             Tablet|       1| 300.0|       300.0|              Tablet|Electronics|            60|
|   1006|      Chris Davis|chris.davis@email...|    5006|2024-01-20|   G901|         Headphones|       1| 100.0|       100.0|          Headphones|Electronics|           100|
|   1007|     David Miller|david.miller@emai...|    5007|2024-01-21|   H234|             Webcam|       1|  50.0|        50.0|              Webcam|Electronics|            80|
|   1008|     Olivia Moore|olivia.moore@emai...|    5008|2024-01-22|   I567|         Smartphone|       1| 700.0|       700.0|          Smartphone|Electronics|            40|
|   1009|    Sophia Taylor|sophia.taylor@ema...|    5009|2024-01-23|   J890|External Hard Drive|       1| 150.0|       150.0| External Hard Drive|Electronics|            90|
|   1010|   James Anderson|james.anderson@em...|    5010|2024-01-24|   K123|    USB Flash Drive|       3|  30.0|        90.0|     USB Flash Drive|Electronics|           300|
|   1011|      Liam Thomas|liam.thomas@email...|    5011|2024-01-25|   L456|         Smartwatch|       1| 200.0|       200.0|          Smartwatch|Electronics|            50|
|   1012|  Charlotte White|charlotte.white@e...|    5012|2024-01-26|   M789|  Bluetooth Speaker|       1| 120.0|       120.0|   Bluetooth Speaker|Electronics|            80|
|   1013|Isabella Martinez|isabella.martinez...|    5013|2024-01-27|   N012|             Camera|       1| 600.0|       600.0|              Camera|Electronics|            20|
|   1014|  Mason Hernandez|mason.hernandez@e...|    5014|2024-01-28|   O345|              Drone|       1| 400.0|       400.0|               Drone|Electronics|            25|
|   1015|        Mia Lopez| mia.lopez@email.com|    5015|2024-01-29|   P678|         VR Headset|       1| 250.0|       250.0|          VR Headset|Electronics|            30|
|   1016|   Lucas Gonzalez|lucas.gonzalez@em...|    5016|2024-01-30|   Q901|     Gaming Console|       1| 500.0|       500.0|      Gaming Console|Electronics|            40|
|   1017|    Amelia Nguyen|amelia.nguyen@ema...|    5017|2024-01-31|   R234|             Router|       1|  80.0|        80.0|              Router|Electronics|            60|
|   1018|        Ethan Lee| ethan.lee@email.com|    5018|2024-02-01|   S567|           Keyboard|       2|  70.0|       140.0|            Keyboard|Electronics|           150|
|   1019|      Harper King|harper.king@email...|    5019|2024-02-02|   T890|              Mouse|       3|  20.0|        60.0|               Mouse|Electronics|           200|
|   1022| Michael Robinson|michael.robinson@...|    5022|2024-02-05|   W789|  Bluetooth Earbuds|       1| 130.0|       130.0|   Bluetooth Earbuds|Electronics|            70|
|   1023|      Ella Harris|ella.harris@email...|    5023|2024-02-06|   X012| Smartwatch Charger|       1|  25.0|        25.0|  Smartwatch Charger|Accessories|           150|
|   1024|    Daniel Garcia|daniel.garcia@ema...|    5024|2024-02-07|   Y345|        Camera Lens|       1| 350.0|       350.0|         Camera Lens|Accessories|            30|
|   1025|   Grace Martinez|grace.martinez@em...|    5025|2024-02-08|   Z678|       Tablet Stand|       1|  40.0|        40.0|        Tablet Stand|Accessories|            80|
|   1026|     Samuel Young|samuel.young@emai...|    5026|2024-02-09|   A234|          Desk Lamp|       2|  60.0|       120.0|           Desk Lamp|  Furniture|            50|
|   1027|      Avery Clark|avery.clark@email...|    5027|2024-02-10|   B567|       Office Chair|       1| 150.0|       150.0|        Office Chair|  Furniture|            20|
|   1028|     Sofia Walker|sofia.walker@emai...|    5028|2024-02-11|   C890|     Desk Organizer|       1|  25.0|        25.0|      Desk Organizer|  Furniture|           100|
|   1029|        Levi Hall| levi.hall@email.com|    5029|2024-02-12|   D123|       Laptop Stand|       1|  45.0|        45.0|        Laptop Stand|  Furniture|            70|
|   1030|   Benjamin Allen|benjamin.allen@em...|    5030|2024-02-13|   E456|      Monitor Stand|       1|  35.0|        35.0|       Monitor Stand|  Furniture|            90|
+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+
### Applying the source schema to the merge dataframe
# Convert DynamicFrame to DataFrame to get the schema
source_df = source_dyf.toDF()
source_schema = source_df.schema

# Function to apply the source schema to the joined DataFrame
def apply_schema(df, schema):
    for field in schema.fields:
        if field.name in df.columns:
            df = df.withColumn(field.name, col(field.name).cast(field.dataType))
    return df.select(*[field.name for field in schema.fields])

merge_df.printSchema()
source_dyf.printSchema()

result_df = apply_schema(merge_df, source_schema)

result_df.printSchema()
result_df.show(30)
merge_dyf = DynamicFrame.fromDF(result_df, glueContext, "merge_dyf")
merge_dyf.printSchema()
root
 |-- user_id: string (nullable = true)
 |-- full_name: string (nullable = true)
 |-- email: string (nullable = true)
 |-- order_id: string (nullable = true)
 |-- order_date: string (nullable = true)
 |-- item_id: string (nullable = true)
 |-- item_product_name: string (nullable = true)
 |-- quantity: integer (nullable = true)
 |-- price: double (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- product_product_name: string (nullable = true)
 |-- category: string (nullable = true)
 |-- stock_quantity: integer (nullable = true)

root
|-- user_id: long
|-- full_name: string
|-- email: string
|-- order_id: long
|-- order_date: string
|-- item_id: string
|-- item_product_name: string
|-- quantity: long
|-- price: double
|-- total_amount: double
|-- product_product_name: string
|-- category: string
|-- stock_quantity: long

root
 |-- user_id: long (nullable = true)
 |-- full_name: string (nullable = true)
 |-- email: string (nullable = true)
 |-- order_id: long (nullable = true)
 |-- order_date: string (nullable = true)
 |-- item_id: string (nullable = true)
 |-- item_product_name: string (nullable = true)
 |-- quantity: long (nullable = true)
 |-- price: double (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- product_product_name: string (nullable = true)
 |-- category: string (nullable = true)
 |-- stock_quantity: long (nullable = true)

+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+
|user_id|        full_name|               email|order_id|order_date|item_id|  item_product_name|quantity| price|total_amount|product_product_name|   category|stock_quantity|
+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+
|   1001|         John Doe|  john.doe@email.com|    5001|2024-01-15|   A123|             Laptop|       1|1200.0|      1250.0|              Laptop|Electronics|            50|
|   1001|         John Doe|  john.doe@email.com|    5001|2024-01-15|   B456|              Mouse|       2|  25.0|      1250.0|               Mouse|Electronics|           200|
|   1002|       Jane Smith|jane.smith@email.com|    5002|2024-01-16|   C789|           Keyboard|       1|  75.0|        75.0|            Keyboard|Electronics|           150|
|   1003|    Alice Johnson|alice.johnson@ema...|    5003|2024-01-17|   D012|            Monitor|       2| 200.0|       400.0|             Monitor|Electronics|            70|
|   1004|     Bob Williams|bob.williams@emai...|    5004|2024-01-18|   E345|            Printer|       1| 150.0|       150.0|             Printer|Electronics|            30|
|   1005|      Emily Brown|emily.brown@email...|    5005|2024-01-19|   F678|             Tablet|       1| 300.0|       300.0|              Tablet|Electronics|            60|
|   1006|      Chris Davis|chris.davis@email...|    5006|2024-01-20|   G901|         Headphones|       1| 100.0|       100.0|          Headphones|Electronics|           100|
|   1007|     David Miller|david.miller@emai...|    5007|2024-01-21|   H234|             Webcam|       1|  50.0|        50.0|              Webcam|Electronics|            80|
|   1008|     Olivia Moore|olivia.moore@emai...|    5008|2024-01-22|   I567|         Smartphone|       1| 700.0|       700.0|          Smartphone|Electronics|            40|
|   1009|    Sophia Taylor|sophia.taylor@ema...|    5009|2024-01-23|   J890|External Hard Drive|       1| 150.0|       150.0| External Hard Drive|Electronics|            90|
|   1010|   James Anderson|james.anderson@em...|    5010|2024-01-24|   K123|    USB Flash Drive|       3|  30.0|        90.0|     USB Flash Drive|Electronics|           300|
|   1011|      Liam Thomas|liam.thomas@email...|    5011|2024-01-25|   L456|         Smartwatch|       1| 200.0|       200.0|          Smartwatch|Electronics|            50|
|   1012|  Charlotte White|charlotte.white@e...|    5012|2024-01-26|   M789|  Bluetooth Speaker|       1| 120.0|       120.0|   Bluetooth Speaker|Electronics|            80|
|   1013|Isabella Martinez|isabella.martinez...|    5013|2024-01-27|   N012|             Camera|       1| 600.0|       600.0|              Camera|Electronics|            20|
|   1014|  Mason Hernandez|mason.hernandez@e...|    5014|2024-01-28|   O345|              Drone|       1| 400.0|       400.0|               Drone|Electronics|            25|
|   1015|        Mia Lopez| mia.lopez@email.com|    5015|2024-01-29|   P678|         VR Headset|       1| 250.0|       250.0|          VR Headset|Electronics|            30|
|   1016|   Lucas Gonzalez|lucas.gonzalez@em...|    5016|2024-01-30|   Q901|     Gaming Console|       1| 500.0|       500.0|      Gaming Console|Electronics|            40|
|   1017|    Amelia Nguyen|amelia.nguyen@ema...|    5017|2024-01-31|   R234|             Router|       1|  80.0|        80.0|              Router|Electronics|            60|
|   1018|        Ethan Lee| ethan.lee@email.com|    5018|2024-02-01|   S567|           Keyboard|       2|  70.0|       140.0|            Keyboard|Electronics|           150|
|   1019|      Harper King|harper.king@email...|    5019|2024-02-02|   T890|              Mouse|       3|  20.0|        60.0|               Mouse|Electronics|           200|
|   1022| Michael Robinson|michael.robinson@...|    5022|2024-02-05|   W789|  Bluetooth Earbuds|       1| 130.0|       130.0|   Bluetooth Earbuds|Electronics|            70|
|   1023|      Ella Harris|ella.harris@email...|    5023|2024-02-06|   X012| Smartwatch Charger|       1|  25.0|        25.0|  Smartwatch Charger|Accessories|           150|
|   1024|    Daniel Garcia|daniel.garcia@ema...|    5024|2024-02-07|   Y345|        Camera Lens|       1| 350.0|       350.0|         Camera Lens|Accessories|            30|
|   1025|   Grace Martinez|grace.martinez@em...|    5025|2024-02-08|   Z678|       Tablet Stand|       1|  40.0|        40.0|        Tablet Stand|Accessories|            80|
|   1026|     Samuel Young|samuel.young@emai...|    5026|2024-02-09|   A234|          Desk Lamp|       2|  60.0|       120.0|           Desk Lamp|  Furniture|            50|
|   1027|      Avery Clark|avery.clark@email...|    5027|2024-02-10|   B567|       Office Chair|       1| 150.0|       150.0|        Office Chair|  Furniture|            20|
|   1028|     Sofia Walker|sofia.walker@emai...|    5028|2024-02-11|   C890|     Desk Organizer|       1|  25.0|        25.0|      Desk Organizer|  Furniture|           100|
|   1029|        Levi Hall| levi.hall@email.com|    5029|2024-02-12|   D123|       Laptop Stand|       1|  45.0|        45.0|        Laptop Stand|  Furniture|            70|
|   1030|   Benjamin Allen|benjamin.allen@em...|    5030|2024-02-13|   E456|      Monitor Stand|       1|  35.0|        35.0|       Monitor Stand|  Furniture|            90|
+-------+-----------------+--------------------+--------+----------+-------+-------------------+--------+------+------------+--------------------+-----------+--------------+

root
|-- user_id: long
|-- full_name: string
|-- email: string
|-- order_id: long
|-- order_date: string
|-- item_id: string
|-- item_product_name: string
|-- quantity: long
|-- price: double
|-- total_amount: double
|-- product_product_name: string
|-- category: string
|-- stock_quantity: long
Write the data in the DynamicFrame to a location in Amazon S3 and a table for it in the AWS Glue Data Catalog
s3output = glueContext.getSink(
  path = output_path,
  connection_type="s3",
  updateBehavior="UPDATE_IN_DATABASE",
  partitionKeys=[],
  compression="snappy",
  enableUpdateCatalog=True,
  transformation_ctx="s3output",
)
s3output.setCatalogInfo(
  catalogDatabase="shopping_db", catalogTableName="merged_data_table "
)
s3output.setFormat("glueparquet")
s3output.writeFrame(merge_dyf)
<awsglue.dynamicframe.DynamicFrame object at 0x7f8105275120>
